// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"encoding/json"
	tfTypes "github.com/epilot-dev/terraform-provider-epilot-entitymapping/internal/provider/types"
	"github.com/epilot-dev/terraform-provider-epilot-entitymapping/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"math/big"
)

func (r *EntityMappingResourceModel) ToSharedMappingConfigV2() *shared.MappingConfigV2 {
	var id string
	id = r.ID.ValueString()

	var config *shared.Config
	if r.Source.Config != nil {
		var journeyRef *shared.JourneyRef
		if r.Source.Config.JourneyRef != nil {
			journeyID := new(string)
			if !r.Source.Config.JourneyRef.JourneyID.IsUnknown() && !r.Source.Config.JourneyRef.JourneyID.IsNull() {
				*journeyID = r.Source.Config.JourneyRef.JourneyID.ValueString()
			} else {
				journeyID = nil
			}
			journeyRef = &shared.JourneyRef{
				JourneyID: journeyID,
			}
		}
		if journeyRef != nil {
			config = &shared.Config{
				JourneyRef: journeyRef,
			}
		}
		var entityRef *shared.EntityRef
		if r.Source.Config.EntityRef != nil {
			var entityID string
			entityID = r.Source.Config.EntityRef.EntityID.ValueString()

			entitySchema := new(string)
			if !r.Source.Config.EntityRef.EntitySchema.IsUnknown() && !r.Source.Config.EntityRef.EntitySchema.IsNull() {
				*entitySchema = r.Source.Config.EntityRef.EntitySchema.ValueString()
			} else {
				entitySchema = nil
			}
			entityRef = &shared.EntityRef{
				EntityID:     entityID,
				EntitySchema: entitySchema,
			}
		}
		if entityRef != nil {
			config = &shared.Config{
				EntityRef: entityRef,
			}
		}
	}
	typeVar := new(shared.Type)
	if !r.Source.Type.IsUnknown() && !r.Source.Type.IsNull() {
		*typeVar = shared.Type(r.Source.Type.ValueString())
	} else {
		typeVar = nil
	}
	source := shared.SourceConfig{
		Config: config,
		Type:   typeVar,
	}
	var targets []shared.TargetConfig = []shared.TargetConfig{}
	for _, targetsItem := range r.Targets {
		allowFailure := new(bool)
		if !targetsItem.AllowFailure.IsUnknown() && !targetsItem.AllowFailure.IsNull() {
			*allowFailure = targetsItem.AllowFailure.ValueBool()
		} else {
			allowFailure = nil
		}
		var conditionMode interface{}
		if !targetsItem.ConditionMode.IsUnknown() && !targetsItem.ConditionMode.IsNull() {
			_ = json.Unmarshal([]byte(targetsItem.ConditionMode.ValueString()), &conditionMode)
		}
		var conditions interface{}
		if !targetsItem.Conditions.IsUnknown() && !targetsItem.Conditions.IsNull() {
			_ = json.Unmarshal([]byte(targetsItem.Conditions.ValueString()), &conditions)
		}
		id1 := new(string)
		if !targetsItem.ID.IsUnknown() && !targetsItem.ID.IsNull() {
			*id1 = targetsItem.ID.ValueString()
		} else {
			id1 = nil
		}
		linkbackRelationAttribute := new(string)
		if !targetsItem.LinkbackRelationAttribute.IsUnknown() && !targetsItem.LinkbackRelationAttribute.IsNull() {
			*linkbackRelationAttribute = targetsItem.LinkbackRelationAttribute.ValueString()
		} else {
			linkbackRelationAttribute = nil
		}
		var linkbackRelationTags []string = []string{}
		for _, linkbackRelationTagsItem := range targetsItem.LinkbackRelationTags {
			linkbackRelationTags = append(linkbackRelationTags, linkbackRelationTagsItem.ValueString())
		}
		var loopConfig *shared.LoopConfig
		if targetsItem.LoopConfig != nil {
			length := new(float64)
			if !targetsItem.LoopConfig.Length.IsUnknown() && !targetsItem.LoopConfig.Length.IsNull() {
				*length, _ = targetsItem.LoopConfig.Length.ValueBigFloat().Float64()
			} else {
				length = nil
			}
			sourcePath := new(string)
			if !targetsItem.LoopConfig.SourcePath.IsUnknown() && !targetsItem.LoopConfig.SourcePath.IsNull() {
				*sourcePath = targetsItem.LoopConfig.SourcePath.ValueString()
			} else {
				sourcePath = nil
			}
			loopConfig = &shared.LoopConfig{
				Length:     length,
				SourcePath: sourcePath,
			}
		}
		var mappingAttributes interface{}
		_ = json.Unmarshal([]byte(targetsItem.MappingAttributes.ValueString()), &mappingAttributes)
		name := new(string)
		if !targetsItem.Name.IsUnknown() && !targetsItem.Name.IsNull() {
			*name = targetsItem.Name.ValueString()
		} else {
			name = nil
		}
		var relationAttributes []shared.RelationAttribute = []shared.RelationAttribute{}
		for _, relationAttributesItem := range targetsItem.RelationAttributes {
			mode := shared.Mode(relationAttributesItem.Mode.ValueString())
			origin := new(shared.AttributeOrigin)
			if !relationAttributesItem.Origin.IsUnknown() && !relationAttributesItem.Origin.IsNull() {
				*origin = shared.AttributeOrigin(relationAttributesItem.Origin.ValueString())
			} else {
				origin = nil
			}
			relatedTo := make(map[string]interface{})
			for relatedToKey, relatedToValue := range relationAttributesItem.RelatedTo {
				var relatedToInst interface{}
				_ = json.Unmarshal([]byte(relatedToValue.ValueString()), &relatedToInst)
				relatedTo[relatedToKey] = relatedToInst
			}
			var sourceFilter *shared.SourceFilter
			if relationAttributesItem.SourceFilter != nil {
				attribute := new(string)
				if !relationAttributesItem.SourceFilter.Attribute.IsUnknown() && !relationAttributesItem.SourceFilter.Attribute.IsNull() {
					*attribute = relationAttributesItem.SourceFilter.Attribute.ValueString()
				} else {
					attribute = nil
				}
				limit := new(int64)
				if !relationAttributesItem.SourceFilter.Limit.IsUnknown() && !relationAttributesItem.SourceFilter.Limit.IsNull() {
					*limit = relationAttributesItem.SourceFilter.Limit.ValueInt64()
				} else {
					limit = nil
				}
				relationTag := new(string)
				if !relationAttributesItem.SourceFilter.RelationTag.IsUnknown() && !relationAttributesItem.SourceFilter.RelationTag.IsNull() {
					*relationTag = relationAttributesItem.SourceFilter.RelationTag.ValueString()
				} else {
					relationTag = nil
				}
				schema := new(string)
				if !relationAttributesItem.SourceFilter.Schema.IsUnknown() && !relationAttributesItem.SourceFilter.Schema.IsNull() {
					*schema = relationAttributesItem.SourceFilter.Schema.ValueString()
				} else {
					schema = nil
				}
				self := new(bool)
				if !relationAttributesItem.SourceFilter.Self.IsUnknown() && !relationAttributesItem.SourceFilter.Self.IsNull() {
					*self = relationAttributesItem.SourceFilter.Self.ValueBool()
				} else {
					self = nil
				}
				tag := new(string)
				if !relationAttributesItem.SourceFilter.Tag.IsUnknown() && !relationAttributesItem.SourceFilter.Tag.IsNull() {
					*tag = relationAttributesItem.SourceFilter.Tag.ValueString()
				} else {
					tag = nil
				}
				sourceFilter = &shared.SourceFilter{
					Attribute:   attribute,
					Limit:       limit,
					RelationTag: relationTag,
					Schema:      schema,
					Self:        self,
					Tag:         tag,
				}
			}
			var target string
			target = relationAttributesItem.Target.ValueString()

			var targetTags []string = []string{}
			for _, targetTagsItem := range relationAttributesItem.TargetTags {
				targetTags = append(targetTags, targetTagsItem.ValueString())
			}
			targetTagsIncludeSource := new(bool)
			if !relationAttributesItem.TargetTagsIncludeSource.IsUnknown() && !relationAttributesItem.TargetTagsIncludeSource.IsNull() {
				*targetTagsIncludeSource = relationAttributesItem.TargetTagsIncludeSource.ValueBool()
			} else {
				targetTagsIncludeSource = nil
			}
			relationAttributes = append(relationAttributes, shared.RelationAttribute{
				Mode:                    mode,
				Origin:                  origin,
				RelatedTo:               relatedTo,
				SourceFilter:            sourceFilter,
				Target:                  target,
				TargetTags:              targetTags,
				TargetTagsIncludeSource: targetTagsIncludeSource,
			})
		}
		var targetSchema string
		targetSchema = targetsItem.TargetSchema.ValueString()

		var targetUnique []string = []string{}
		for _, targetUniqueItem := range targetsItem.TargetUnique {
			targetUnique = append(targetUnique, targetUniqueItem.ValueString())
		}
		targets = append(targets, shared.TargetConfig{
			AllowFailure:              allowFailure,
			ConditionMode:             conditionMode,
			Conditions:                conditions,
			ID:                        id1,
			LinkbackRelationAttribute: linkbackRelationAttribute,
			LinkbackRelationTags:      linkbackRelationTags,
			LoopConfig:                loopConfig,
			MappingAttributes:         mappingAttributes,
			Name:                      name,
			RelationAttributes:        relationAttributes,
			TargetSchema:              targetSchema,
			TargetUnique:              targetUnique,
		})
	}
	out := shared.MappingConfigV2{
		ID:      id,
		Source:  source,
		Targets: targets,
	}
	return &out
}

func (r *EntityMappingResourceModel) RefreshFromSharedMappingConfigV2(resp *shared.MappingConfigV2) {
	if resp != nil {
		r.ID = types.StringValue(resp.ID)
		if resp.Source.Config == nil {
			r.Source.Config = nil
		} else {
			r.Source.Config = &tfTypes.Config{}
			if resp.Source.Config.EntityRef != nil {
				r.Source.Config.EntityRef = &tfTypes.EntityRef{}
				r.Source.Config.EntityRef.EntityID = types.StringValue(resp.Source.Config.EntityRef.EntityID)
				r.Source.Config.EntityRef.EntitySchema = types.StringPointerValue(resp.Source.Config.EntityRef.EntitySchema)
			}
			if resp.Source.Config.JourneyRef != nil {
				r.Source.Config.JourneyRef = &tfTypes.JourneyRef{}
				r.Source.Config.JourneyRef.JourneyID = types.StringPointerValue(resp.Source.Config.JourneyRef.JourneyID)
			}
		}
		if resp.Source.Type != nil {
			r.Source.Type = types.StringValue(string(*resp.Source.Type))
		} else {
			r.Source.Type = types.StringNull()
		}
		r.Targets = []tfTypes.TargetConfig{}
		if len(r.Targets) > len(resp.Targets) {
			r.Targets = r.Targets[:len(resp.Targets)]
		}
		for targetsCount, targetsItem := range resp.Targets {
			var targets1 tfTypes.TargetConfig
			targets1.AllowFailure = types.BoolPointerValue(targetsItem.AllowFailure)
			if targetsItem.ConditionMode == nil {
				targets1.ConditionMode = types.StringNull()
			} else {
				conditionModeResult, _ := json.Marshal(targetsItem.ConditionMode)
				targets1.ConditionMode = types.StringValue(string(conditionModeResult))
			}
			if targetsItem.Conditions == nil {
				targets1.Conditions = types.StringNull()
			} else {
				conditionsResult, _ := json.Marshal(targetsItem.Conditions)
				targets1.Conditions = types.StringValue(string(conditionsResult))
			}
			targets1.ID = types.StringPointerValue(targetsItem.ID)
			targets1.LinkbackRelationAttribute = types.StringPointerValue(targetsItem.LinkbackRelationAttribute)
			targets1.LinkbackRelationTags = []types.String{}
			for _, v := range targetsItem.LinkbackRelationTags {
				targets1.LinkbackRelationTags = append(targets1.LinkbackRelationTags, types.StringValue(v))
			}
			if targetsItem.LoopConfig == nil {
				targets1.LoopConfig = nil
			} else {
				targets1.LoopConfig = &tfTypes.LoopConfig{}
				if targetsItem.LoopConfig.Length != nil {
					targets1.LoopConfig.Length = types.NumberValue(big.NewFloat(float64(*targetsItem.LoopConfig.Length)))
				} else {
					targets1.LoopConfig.Length = types.NumberNull()
				}
				targets1.LoopConfig.SourcePath = types.StringPointerValue(targetsItem.LoopConfig.SourcePath)
			}
			mappingAttributesResult, _ := json.Marshal(targetsItem.MappingAttributes)
			targets1.MappingAttributes = types.StringValue(string(mappingAttributesResult))
			targets1.Name = types.StringPointerValue(targetsItem.Name)
			targets1.RelationAttributes = []tfTypes.RelationAttribute{}
			for relationAttributesCount, relationAttributesItem := range targetsItem.RelationAttributes {
				var relationAttributes1 tfTypes.RelationAttribute
				relationAttributes1.Mode = types.StringValue(string(relationAttributesItem.Mode))
				if relationAttributesItem.Origin != nil {
					relationAttributes1.Origin = types.StringValue(string(*relationAttributesItem.Origin))
				} else {
					relationAttributes1.Origin = types.StringNull()
				}
				if len(relationAttributesItem.RelatedTo) > 0 {
					relationAttributes1.RelatedTo = make(map[string]types.String)
					for key, value := range relationAttributesItem.RelatedTo {
						result, _ := json.Marshal(value)
						relationAttributes1.RelatedTo[key] = types.StringValue(string(result))
					}
				}
				if relationAttributesItem.SourceFilter == nil {
					relationAttributes1.SourceFilter = nil
				} else {
					relationAttributes1.SourceFilter = &tfTypes.SourceFilter{}
					relationAttributes1.SourceFilter.Attribute = types.StringPointerValue(relationAttributesItem.SourceFilter.Attribute)
					relationAttributes1.SourceFilter.Limit = types.Int64PointerValue(relationAttributesItem.SourceFilter.Limit)
					relationAttributes1.SourceFilter.RelationTag = types.StringPointerValue(relationAttributesItem.SourceFilter.RelationTag)
					relationAttributes1.SourceFilter.Schema = types.StringPointerValue(relationAttributesItem.SourceFilter.Schema)
					relationAttributes1.SourceFilter.Self = types.BoolPointerValue(relationAttributesItem.SourceFilter.Self)
					relationAttributes1.SourceFilter.Tag = types.StringPointerValue(relationAttributesItem.SourceFilter.Tag)
				}
				relationAttributes1.Target = types.StringValue(relationAttributesItem.Target)
				relationAttributes1.TargetTags = []types.String{}
				for _, v := range relationAttributesItem.TargetTags {
					relationAttributes1.TargetTags = append(relationAttributes1.TargetTags, types.StringValue(v))
				}
				relationAttributes1.TargetTagsIncludeSource = types.BoolPointerValue(relationAttributesItem.TargetTagsIncludeSource)
				if relationAttributesCount+1 > len(targets1.RelationAttributes) {
					targets1.RelationAttributes = append(targets1.RelationAttributes, relationAttributes1)
				} else {
					targets1.RelationAttributes[relationAttributesCount].Mode = relationAttributes1.Mode
					targets1.RelationAttributes[relationAttributesCount].Origin = relationAttributes1.Origin
					targets1.RelationAttributes[relationAttributesCount].RelatedTo = relationAttributes1.RelatedTo
					targets1.RelationAttributes[relationAttributesCount].SourceFilter = relationAttributes1.SourceFilter
					targets1.RelationAttributes[relationAttributesCount].Target = relationAttributes1.Target
					targets1.RelationAttributes[relationAttributesCount].TargetTags = relationAttributes1.TargetTags
					targets1.RelationAttributes[relationAttributesCount].TargetTagsIncludeSource = relationAttributes1.TargetTagsIncludeSource
				}
			}
			targets1.TargetSchema = types.StringValue(targetsItem.TargetSchema)
			targets1.TargetUnique = []types.String{}
			for _, v := range targetsItem.TargetUnique {
				targets1.TargetUnique = append(targets1.TargetUnique, types.StringValue(v))
			}
			if targetsCount+1 > len(r.Targets) {
				r.Targets = append(r.Targets, targets1)
			} else {
				r.Targets[targetsCount].AllowFailure = targets1.AllowFailure
				r.Targets[targetsCount].ConditionMode = targets1.ConditionMode
				r.Targets[targetsCount].Conditions = targets1.Conditions
				r.Targets[targetsCount].ID = targets1.ID
				r.Targets[targetsCount].LinkbackRelationAttribute = targets1.LinkbackRelationAttribute
				r.Targets[targetsCount].LinkbackRelationTags = targets1.LinkbackRelationTags
				r.Targets[targetsCount].LoopConfig = targets1.LoopConfig
				r.Targets[targetsCount].MappingAttributes = targets1.MappingAttributes
				r.Targets[targetsCount].Name = targets1.Name
				r.Targets[targetsCount].RelationAttributes = targets1.RelationAttributes
				r.Targets[targetsCount].TargetSchema = targets1.TargetSchema
				r.Targets[targetsCount].TargetUnique = targets1.TargetUnique
			}
		}
	}
}
