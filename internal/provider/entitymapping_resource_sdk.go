// Code generated by Speakeasy (https://speakeasyapi.com). DO NOT EDIT.

package provider

import (
	"encoding/json"
	tfTypes "github.com/epilot-dev/terraform-provider-epilot-entitymapping/internal/provider/types"
	"github.com/epilot-dev/terraform-provider-epilot-entitymapping/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *EntityMappingResourceModel) ToSharedMappingConfigV2() *shared.MappingConfigV2 {
	id := r.ID.ValueString()
	var config *shared.Config
	if r.Source.Config != nil {
		var journeyRef *shared.JourneyRef
		if r.Source.Config.JourneyRef != nil {
			journeyID := new(string)
			if !r.Source.Config.JourneyRef.JourneyID.IsUnknown() && !r.Source.Config.JourneyRef.JourneyID.IsNull() {
				*journeyID = r.Source.Config.JourneyRef.JourneyID.ValueString()
			} else {
				journeyID = nil
			}
			journeyRef = &shared.JourneyRef{
				JourneyID: journeyID,
			}
		}
		if journeyRef != nil {
			config = &shared.Config{
				JourneyRef: journeyRef,
			}
		}
		var entityRef *shared.EntityRef
		if r.Source.Config.EntityRef != nil {
			entityID := r.Source.Config.EntityRef.EntityID.ValueString()
			entitySchema := new(string)
			if !r.Source.Config.EntityRef.EntitySchema.IsUnknown() && !r.Source.Config.EntityRef.EntitySchema.IsNull() {
				*entitySchema = r.Source.Config.EntityRef.EntitySchema.ValueString()
			} else {
				entitySchema = nil
			}
			entityRef = &shared.EntityRef{
				EntityID:     entityID,
				EntitySchema: entitySchema,
			}
		}
		if entityRef != nil {
			config = &shared.Config{
				EntityRef: entityRef,
			}
		}
	}
	typeVar := new(shared.Type)
	if !r.Source.Type.IsUnknown() && !r.Source.Type.IsNull() {
		*typeVar = shared.Type(r.Source.Type.ValueString())
	} else {
		typeVar = nil
	}
	source := shared.SourceConfig{
		Config: config,
		Type:   typeVar,
	}
	var targets interface{}
	_ = json.Unmarshal([]byte(r.Targets.ValueString()), &targets)
	out := shared.MappingConfigV2{
		ID:      id,
		Source:  source,
		Targets: targets,
	}
	return &out
}

func (r *EntityMappingResourceModel) RefreshFromSharedMappingConfigV2(resp *shared.MappingConfigV2) {
	if resp != nil {
		r.ID = types.StringValue(resp.ID)
		if resp.Source.Config == nil {
			r.Source.Config = nil
		} else {
			r.Source.Config = &tfTypes.Config{}
			if resp.Source.Config.EntityRef != nil {
				r.Source.Config.EntityRef = &tfTypes.EntityRef{}
				r.Source.Config.EntityRef.EntityID = types.StringValue(resp.Source.Config.EntityRef.EntityID)
				r.Source.Config.EntityRef.EntitySchema = types.StringPointerValue(resp.Source.Config.EntityRef.EntitySchema)
			}
			if resp.Source.Config.JourneyRef != nil {
				r.Source.Config.JourneyRef = &tfTypes.JourneyRef{}
				r.Source.Config.JourneyRef.JourneyID = types.StringPointerValue(resp.Source.Config.JourneyRef.JourneyID)
			}
		}
		if resp.Source.Type != nil {
			r.Source.Type = types.StringValue(string(*resp.Source.Type))
		} else {
			r.Source.Type = types.StringNull()
		}
		targetsResult, _ := json.Marshal(resp.Targets)
		r.Targets = types.StringValue(string(targetsResult))
	}
}
