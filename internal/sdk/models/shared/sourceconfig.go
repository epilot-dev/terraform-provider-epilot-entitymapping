// Code generated by Speakeasy (https://speakeasyapi.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/epilot-dev/terraform-provider-epilot-entitymapping/internal/sdk/internal/utils"
)

type ConfigType string

const (
	ConfigTypeJourneyRef ConfigType = "JourneyRef"
	ConfigTypeEntityRef  ConfigType = "EntityRef"
)

type Config struct {
	JourneyRef *JourneyRef
	EntityRef  *EntityRef

	Type ConfigType
}

func CreateConfigJourneyRef(journeyRef JourneyRef) Config {
	typ := ConfigTypeJourneyRef

	return Config{
		JourneyRef: &journeyRef,
		Type:       typ,
	}
}

func CreateConfigEntityRef(entityRef EntityRef) Config {
	typ := ConfigTypeEntityRef

	return Config{
		EntityRef: &entityRef,
		Type:      typ,
	}
}

func (u *Config) UnmarshalJSON(data []byte) error {

	var journeyRef JourneyRef = JourneyRef{}
	if err := utils.UnmarshalJSON(data, &journeyRef, "", true, true); err == nil {
		u.JourneyRef = &journeyRef
		u.Type = ConfigTypeJourneyRef
		return nil
	}

	var entityRef EntityRef = EntityRef{}
	if err := utils.UnmarshalJSON(data, &entityRef, "", true, true); err == nil {
		u.EntityRef = &entityRef
		u.Type = ConfigTypeEntityRef
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for Config", string(data))
}

func (u Config) MarshalJSON() ([]byte, error) {
	if u.JourneyRef != nil {
		return utils.MarshalJSON(u.JourneyRef, "", true)
	}

	if u.EntityRef != nil {
		return utils.MarshalJSON(u.EntityRef, "", true)
	}

	return nil, errors.New("could not marshal union type Config: all fields are null")
}

type Type string

const (
	TypeJourney Type = "journey"
	TypeEntity  Type = "entity"
)

func (e Type) ToPointer() *Type {
	return &e
}
func (e *Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "journey":
		fallthrough
	case "entity":
		*e = Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Type: %v", v)
	}
}

type SourceConfig struct {
	Config *Config `json:"config,omitempty"`
	Type   *Type   `json:"type,omitempty"`
}

func (o *SourceConfig) GetConfig() *Config {
	if o == nil {
		return nil
	}
	return o.Config
}

func (o *SourceConfig) GetType() *Type {
	if o == nil {
		return nil
	}
	return o.Type
}
