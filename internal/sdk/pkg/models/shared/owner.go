// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type Type string

const (
	TypeUser            Type = "user"
	TypeInternalService Type = "internal_service"
)

func (e Type) ToPointer() *Type {
	return &e
}

func (e *Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "user":
		fallthrough
	case "internal_service":
		*e = Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Type: %v", v)
	}
}

type Owner struct {
	OrgID  *string `json:"org_id,omitempty"`
	Type   Type    `json:"type"`
	UserID *string `json:"user_id,omitempty"`
}

func (o *Owner) GetOrgID() *string {
	if o == nil {
		return nil
	}
	return o.OrgID
}

func (o *Owner) GetType() Type {
	if o == nil {
		return Type("")
	}
	return o.Type
}

func (o *Owner) GetUserID() *string {
	if o == nil {
		return nil
	}
	return o.UserID
}
